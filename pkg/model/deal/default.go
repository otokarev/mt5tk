package deal

// !!!WARNING!!! It is a autogenerated file!

import (
	"encoding/json"
	"github.com/google/go-querystring/query"
	"github.com/otokarev/mt5tk/pkg/client"
	"github.com/otokarev/mt5tk/pkg/connection"
	"github.com/otokarev/mt5tk/pkg/model/entities"
	"log"
	"strconv"
)

type Deal struct {
	Client     *client.Client
	ClientPool []*client.Client
}

type getRequest struct {
	Id string `url:"ticket"`
}

type getResponse struct {
	Answer entities.Deal `json:"answer"`
}

type totalResponse struct {
	Answer struct {
		Total string `json:"total"`
	} `json:"answer"`
}

func (g *Deal) GetTotal() (int, error) {
	payload, err := g.Client.Get("/api/deal/total")
	if err != nil {
		return 0, err
	}
	resp := totalResponse{}
	if nil != json.Unmarshal(payload, &resp) {
		return 0, err
	}
	total, err := strconv.Atoi(resp.Answer.Total)
	if nil != err {
		return 0, err
	}

	return total, nil
}

func (g *Deal) Add(data entities.Deal) (entities.Deal, error) {
	body, err := json.Marshal(data)
	if err != nil {
		return entities.Deal{}, err
	}
	resultBytes, err := g.Client.Post("/api/deal/add", body)
	if err != nil {
		return entities.Deal{}, err
	}

	var result entities.Deal
	err = json.Unmarshal(resultBytes, &result)
	if err != nil {
		return entities.Deal{}, err
	}

	return result, err
}

func (g *Deal) Exists(name string) (bool, error) {
	_, err := g.Get(name)
	if err == nil {
		return true, nil
	}

	if cerr, ok := err.(*connection.Error); ok == true && cerr.IsNotFound() == false {
		log.Fatalf("cannot verify deal %s existance, error: %s", name, err.Error())
		return false, cerr
	}

	return false, nil
}

func (g *Deal) Get(name string) (entities.Deal, error) {
	req := getRequest{Id: name}
	q, err := query.Values(req)
	if err != nil {
		return entities.Deal{}, err
	}

	payload, err := g.Client.Get("/api/deal/get?" + q.Encode())
	if err != nil {
		return entities.Deal{}, err
	}
	resp := getResponse{}
	if err := json.Unmarshal(payload, &resp); err != nil {
		return entities.Deal{}, err
	}

	return resp.Answer, nil
}
